# This script generates and draws examples for the circle detection

using PyPlot
using Printf
using DelimitedFiles

"""

Generate perturbed points in a circle given by `θSol`. Construct a
test file for `RAFF`.

"""
function gen_circle(θSol, var, np)

    p = (α, ρ) -> [ρ * cos(α) + θSol[1], ρ * sin(α) + θSol[2]]
    f = (x) -> (x[1] - θSol[1])^2 + (x[2] - θSol[2])^2 - θSol[3]^2

    α = 0.0

    data = Array{Float64, 2}(undef, 3 * np, 3) 

    i = 1
    
    while α < 2.0 * π

        pt = p(α, θSol[3] + var * randn())

        data[i, 1:2] = pt
        data[i,   3] = 0.0 #f(pt)

        α += (2.0 * π / np) * rand()

        i += 1

    end

    open("/tmp/output.txt", "w") do fp
    
        # Dimension of the domain of the function to fit
        @printf(fp, "%d\n", 2)

        for k = 1:i - 1

            @printf(fp, "%20.15f %20.15f %20.15f %1d\n",
                    data[k, 1], data[k, 2], data[k, 3], 0)

        end

        # Inner outlier
        pt =  p(3 * π / 4, θSol[3] * 0.6)

        data[i, 1:2] = pt
        data[i,   3] = 0.0 #f(pt)

        @printf(fp, "%20.15f %20.15f %20.15f %1d\n",
                data[i, 1], data[i, 2], data[i, 3], 1)

        i += 1
    
        # Outer outlier
    
        pt =  p(5 * π / 4, θSol[3] * 1.3)

        data[i, 1:2] = pt
        data[i,   3] = 0.0 # f(pt)

        @printf(fp, "%20.15f %20.15f %20.15f %1d\n",
                data[i, 1], data[i, 2], data[i, 3], 1)

    end

    return data, i

end

"""

Draw the points generated by the previous function.

"""
function draw_circle(data, np)

    d = data[1:np, :]

    PyPlot.plot(d[1:np - 1, 1], d[1:np - 1, 2], "b.", markersize=10)

    PyPlot.plot(d[np:end, 1], d[np:end, 2], "r.", markersize=10)

    PyPlot.axis("scaled")

    PyPlot.xticks([])

    PyPlot.yticks([])

    PyPlot.savefig("/tmp/circle.png", dpi=72)

end

"""

Draw the points and the solutions obtained. Save the picture in a file.

"""
function draw_circle_sol(tSol, fSol, lsSol)

    datafile = "/tmp/output.txt"

    fp = open(datafile, "r")

    N = parse(Int, readline(fp))

    M = readdlm(fp)

    close(fp)

    x = M[:, 1]
    y = M[:, 2]
    ρ = M[:, 3]
    c = M[:, 4]

    t = [0:0.1:2.1 * π;]
    
    ptx = (α, ρ, d) -> ρ * cos(α) + d[1]
    pty = (α, ρ, d) -> ρ * sin(α) + d[2]

    # True solution
    
    pptx = (α) -> ptx(α, tSol[3], tSol[1:2])
    ppty = (α) -> pty(α, tSol[3], tSol[1:2])

    PyPlot.plot(pptx.(t), ppty.(t), "b--", label="True solution")
    
    # RAFF solution
    
    pptx = (α) -> ptx(α, fSol[3], fSol[1:2])
    ppty = (α) -> pty(α, fSol[3], fSol[1:2])

    PyPlot.plot(pptx.(t), ppty.(t), "g-", label="RAFF")
    
    # LS solution
    
    pptx = (α) -> ptx(α, lsSol[3], lsSol[1:2])
    ppty = (α) -> pty(α, lsSol[3], lsSol[1:2])

    PyPlot.plot(pptx.(t), ppty.(t), "r-", label="Least squares")

    PyPlot.legend(loc=4)
    
    PyPlot.axis("scaled")

    PyPlot.xticks([])

    PyPlot.yticks([])

    PyPlot.scatter(x, y, c=c, marker="o", s=50.0, linewidths=0.2,
                   cmap=PyPlot.cm."Paired", alpha=0.9)

    PyPlot.savefig("/tmp/circle.png", dpi=150, bbox_inches="tight")

end
